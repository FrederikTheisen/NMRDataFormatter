using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

namespace MDTools
{
    class ShiftyToShenBaxFormatter
    {
        static int FirstID = -1;
        static string Sequence = "";
        static List<Residue> Data = new List<Residue>();

        public static void Run()
        {
            var file = File.ReadAllLines("data.txt");

            ReadData(file);

            GenerateOutput();
        }

        static void ReadData(string[] data)
        {
            foreach (var line in data)
            {
                if (string.IsNullOrEmpty(line.Trim())) continue;
                if (line[0] == '#') continue;

                var dat = line.Trim().Replace('.', ',').Split().Where(d => !string.IsNullOrEmpty(d)).ToArray();

                Sequence += dat[1];

                if (FirstID < 0) FirstID = int.Parse(dat[0]);

                Data.Add(new Residue(dat));
            }
        }

        /// <summary>
        /// REMARK Chemical Shift Table for ubiquitin
        ///
        ///DATA FIRST_RESID 1
        ///
        ///DATA SEQUENCE MQIFVKTLTG KTITLEVEPS DTIENVKAKI QDKEGIPPDQ QRLIFAGKQL
        ///DATA SEQUENCE EDGRTLSDYN IQKESTLHLV LRLRGG
        ///
        ///VARS RESID RESNAME ATOMNAME SHIFT
        ///FORMAT %4d   %1s     %4s      %8.3f
        ///
        ///   1 M CB   33.270
        ///   1 M CA   54.450
        ///   1 M C  170.540
        ///   1 M HA    4.230
        ///
        /// </summary>
        static void GenerateOutput()
        {
            List<string> lines = new List<string>();
            lines.Add("REMARK CS Table Generated by ShenBaxFormatter");
            lines.Add("");
            lines.Add("DATA FIRST_RESID " + FirstID);
            lines.Add("");

            for (int i = 0; i < Sequence.Length; i += 50)
            {
                string subseq = "";
                if (i + 50 < Sequence.Length) subseq = Sequence.Substring(i, 50);
                else subseq = Sequence.Substring(i);

                string line = "DATA SEQUENCE ";

                for (int j = 0; j < subseq.Length; j++)
                {
                    if ((j + 1) % 10 == 0) line += " ";
                    line += subseq[j];
                }

                lines.Add(line);
            }

            lines.Add("");
            lines.Add("VARS RESID RESNAME ATOMNAME SHIFT");
            lines.Add("FORMAT %4d   %1s     %4s      %8.3f");
            lines.Add("");

            foreach (var res in Data)
            {
                lines.AddRange(res.GetLines());
            }

            foreach (var line in lines) Console.WriteLine(line);
        }

        class Residue
        {
            string ResName;
            int Num;

            float HA;
            float CA;
            float CB;
            float CO;
            float N;
            float HN;

            /// <summary>
            /// #NUM	AA	HA	CA	CB	CO	N	HN
            /// </summary>
            /// <param name="data"></param>
            public Residue(string[] data)
            {
                Num = int.Parse(data[0]);
                ResName = data[1];
                HA = float.Parse(data[2]);
                CA = float.Parse(data[3]);
                CB = float.Parse(data[4]);
                CO = float.Parse(data[5]);
                N = float.Parse(data[6]);
                HN = float.Parse(data[7]);
            }

            string ToField(string s, int l)
            {
                while (s.Length < l) s = " " + s;

                return s.Replace(',', '.');
            }

            string ToLine(string name, float value)
            {
                return ToField(Num.ToString(), 4) + " " + ResName + " " + ToField(name, 4) + " " + ToField(value.ToString("##0.000"), 8);
            }

            public List<string> GetLines()
            {
                var lines = new List<string>();

                if (HA > 1)
                {
                    if (ResName != "G") lines.Add(ToLine("HA", HA));
                    else
                    {
                        lines.Add(ToLine("HA2", HA));
                        lines.Add(ToLine("HA3", HA));
                    }

                }
                if (CA > 1) lines.Add(ToLine("CA", CA));
                if (CB > 1) lines.Add(ToLine("CB", CB));
                if (CO > 1) lines.Add(ToLine("C", CO));
                if (N > 1) lines.Add(ToLine("N", N));
                if (HN > 1) lines.Add(ToLine("HN", HN));

                return lines;
            }
        }
    }
}
